file_env 'MONGO_INITDB_ROOT_USERNAME'
file_env 'MONGO_INITDB_ROOT_PASSWORD'

if [ -z "${shouldPerformInitdb:-}" ] && [ "$MONGO_INITDB_ROOT_USERNAME" ] && [ "$MONGO_INITDB_ROOT_PASSWORD" ]; then
# copy from /usr/local/bin/docker-entrypoint.sh
	mongodHackedArgs=( "$@" )
	if _parse_config "$@"; then
		_mongod_hack_ensure_arg_val --config "$tempConfigFile" "${mongodHackedArgs[@]}"
	fi
	_mongod_hack_ensure_arg_val --bind_ip 127.0.0.1 "${mongodHackedArgs[@]}"
	_mongod_hack_ensure_arg_val --port 27017 "${mongodHackedArgs[@]}"
	_mongod_hack_ensure_no_arg --bind_ip_all "${mongodHackedArgs[@]}"

	# remove "--auth" and "--replSet" for our initial startup (see https://docs.mongodb.com/manual/tutorial/enable-authentication/#start-mongodb-without-access-control)
	# https://github.com/docker-library/mongo/issues/211
	_mongod_hack_ensure_no_arg --auth "${mongodHackedArgs[@]}"
	# "keyFile implies security.authorization"
	# https://docs.mongodb.com/manual/reference/configuration-options/#mongodb-setting-security.keyFile
	_mongod_hack_ensure_no_arg_val --keyFile "${mongodHackedArgs[@]}"
	if [ "$MONGO_INITDB_ROOT_USERNAME" ] && [ "$MONGO_INITDB_ROOT_PASSWORD" ]; then
		_mongod_hack_ensure_no_arg_val --replSet "${mongodHackedArgs[@]}"
	fi

	# "BadValue: need sslPEMKeyFile when SSL is enabled" vs "BadValue: need to enable SSL via the sslMode flag when using SSL configuration parameters"
	tlsMode='disabled'
	if _mongod_hack_have_arg '--tlsCertificateKeyFile' "$@"; then
		tlsMode='allowTLS'
	elif _mongod_hack_have_arg '--sslPEMKeyFile' "$@"; then
		tlsMode='allowSSL'
	fi
	# 4.2 switched all configuration/flag names from "SSL" to "TLS"
	if [ "$tlsMode" = 'allowTLS' ] || mongod --help 2>&1 | grep -q -- ' --tlsMode '; then
		_mongod_hack_ensure_arg_val --tlsMode "$tlsMode" "${mongodHackedArgs[@]}"
	else
		_mongod_hack_ensure_arg_val --sslMode "$tlsMode" "${mongodHackedArgs[@]}"
	fi

	if stat "/proc/$$/fd/1" > /dev/null && [ -w "/proc/$$/fd/1" ]; then
		# https://github.com/mongodb/mongo/blob/38c0eb538d0fd390c6cb9ce9ae9894153f6e8ef5/src/mongo/db/initialize_server_global_state.cpp#L237-L251
		# https://github.com/docker-library/mongo/issues/164#issuecomment-293965668
		_mongod_hack_ensure_arg_val --logpath "/proc/$$/fd/1" "${mongodHackedArgs[@]}"
	else
		initdbLogPath="$(_dbPath "$@")/docker-initdb.log"
		echo >&2 "warning: initdb logs cannot write to '/proc/$$/fd/1', so they are in '$initdbLogPath' instead"
		_mongod_hack_ensure_arg_val --logpath "$initdbLogPath" "${mongodHackedArgs[@]}"
	fi
	_mongod_hack_ensure_arg --logappend "${mongodHackedArgs[@]}"

	pidfile="$TMPDIR/docker-entrypoint-temp-mongod.pid"
	rm -f "$pidfile"
	_mongod_hack_ensure_arg_val --pidfilepath "$pidfile" "${mongodHackedArgs[@]}"

	"${mongodHackedArgs[@]}" --fork

	mongo=( mongo --host 127.0.0.1 --port 27017 --quiet )

	# check to see that our "mongod" actually did start up (catches "--help", "--version", MongoDB 3.2 being silly, slow prealloc, etc)
	# https://jira.mongodb.org/browse/SERVER-16292
	tries=30
	while true; do
		if ! { [ -s "$pidfile" ] && ps "$(< "$pidfile")" &> /dev/null; }; then
			# bail ASAP if "mongod" isn't even running
			echo >&2
			echo >&2 "error: $originalArgOne does not appear to have stayed running -- perhaps it had an error?"
			echo >&2
			exit 1
		fi
		if "${mongo[@]}" 'admin' --eval 'quit(0)' &> /dev/null; then
			# success!
			break
		fi
		(( tries-- ))
		if [ "$tries" -le 0 ]; then
			echo >&2
			echo >&2 "error: $originalArgOne does not appear to have accepted connections quickly enough -- perhaps it had an error?"
			echo >&2
			exit 1
		fi
		sleep 1
	done
# end copy from /usr/local/bin/docker-entrypoint.sh

	for f in /docker-entrypoint-initdb.d/*; do
		case "$f" in
			*.sh) echo "$0: running $f"; . "$f" ;;
			*.js) echo "$0: running $f"; mongo --host 127.0.0.1 --port 27017 --quiet -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --authenticationDatabase admin "${MONGO_INITDB_DATABASE:-test}" "$f"; echo ;;
			*)    echo "$0: ignoring $f" ;;
		esac
		echo
	done

# copy from /usr/local/bin/docker-entrypoint.sh
	"${mongodHackedArgs[@]}" --shutdown
	rm -f "$pidfile"

	echo
	echo 'MongoDB init process complete; ready for start up.'
	echo
# end copy from /usr/local/bin/docker-entrypoint.sh
fi

exec "$@"